#pragma kernel CSMain

RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

Texture2D _SkyTexture;
SamplerState sampler_SkyTexture; // sampler + name

Texture2D _Perlin;
SamplerState sampler_Perlin; // sampler + name

float _RS;
bool _Normal;

struct Ray
{
    float3 origin;
    float3 direction;
};

float2 rand_2_10(in float2 uv) {
    float noiseX = (frac(sin(dot(uv, float2(12.9898, 78.233) * 2.0)) * 43758.5453));
    float noiseY = sqrt(1 - noiseX * noiseX);
    return float2(noiseX, noiseY);
}

float3 toSpherical(float3 pos)
{
    float r = length(pos);
    float theta = acos(pos.y / r);
    float phi = atan2(pos.z, pos.x); // y and z switched
    return float3(r, theta, phi);
}

float3 calculateBackground(float3 dir)
{
    float3 spherical = toSpherical(dir);
    float2 equirectangular = float2(
        spherical.y * 0.31830988618,
        spherical.z * 0.15915494309 + 0.5
        ); //???

    float3 skyPixel = _SkyTexture.SampleLevel(sampler_SkyTexture, equirectangular.yx, 0).xyz;
    return skyPixel;
}

float3 bhColor(float3 pos)
{
    return float3(0, 0, 0);

    //float3 spherical = toSpherical(pos);
    //float step = 0.7853; // PI / 4;
    //bool thetaMod = (spherical.y + 6.283) % step * 2. > step;
    //bool phiMod = (spherical.z + 6.283) % step * 2. > step;
    //if (thetaMod ^ phiMod)
    //    return float3(1, 0, 0);
    //else
    //    return float3(0.3, 0, 0);
}

float sdTorus(float3 p, float2 rr)
{
    //float2 q = float2(length(p.xz) - t.x, p.y);
    //return length(q) - t.y;

    float r = length(p.xz);
    if (r < rr.x)
    {
        return length(float3(rr.x - r, p.y, 0.));
    }
    else if (r < rr.y)
    {
        return abs(p.y);
    }
    else
    {
        return length(float3(rr.y - r, p.y, 0.));
    }
}

float4 Render(Ray ray)
{
    float3 color = float3(0, 0, 0);

    int i;
    for (i = 0; i < 100; i++)
    {
        float r = length(ray.origin); // distance to BH

        //// RING
        //if (lastOrigin.y * ray.origin.y < 0)
        //{
        //    float t = lastOrigin.y / (ray.origin.y - lastOrigin.y);
        //    float3 p = lastOrigin + t * (lastOrigin - ray.origin);
        //    float pr = length(p);
        //    if (pr > 2.9 * _RS && pr < 5.5 * _RS)
        //    {   
        //        //return float4(1, 1, 1, 1);
        //        float b = rand_2_10(pr.xx);
        //        return float4(b,b,b,1);
        //    }
        //}

        float innerR = 4 * _RS;
        float outerR = 8 * _RS;
        float torus = sdTorus(ray.origin, float2(innerR, outerR));
        if (torus < .01)
        {
            float ring = 0.5 * (r - innerR) / (outerR - innerR);
            float3 skyPixel = _Perlin.SampleLevel(sampler_Perlin, float2(ring, 0.5), 0).xyz;
            //color += skyPixel * 0.001;
            skyPixel = floor(skyPixel + 0.6);
            return float4(skyPixel, 1);
        }

        if (r > 30. * _RS)
        {
            break;
        }

        if (_Normal)
        {
            // distacnce to sphere surface
            float d = r - _RS;
            d = min(d, torus);
            if (d < 0.001)
            {
                // hit BH sphere
                return float4(bhColor(ray.origin).xyz, 1.);
            }
            // march forward
            ray.origin += ray.direction * d;
        }
        else
        {
            if (r < _RS)
            {
                // HIT BH
                return float4(bhColor(ray.origin).xyz, 1);
            }
            else if (r > 50. * _RS)
            {
                // ESCAPE BH
                break;
            }

            // Physics adapted from set111's 3D black hole https://www.shadertoy.com/view/tsBXW3
            float dist = (r - _RS);
            float d = min(.92, 0.01 + 0.15 * dist + 0.1 / r * dist*dist);
            d = max(d, 0.);
            d = min(d, torus);
            float F = _RS * 1.5 / (r * r);             // bending force
            ray.direction = normalize(ray.direction - d * F * ray.origin / r); // bend ray towards BH

            ray.origin += d * ray.direction;
        }
    }

    // GLOW
    float b = i / 100.;
    b = b * b * 3;
    color += float3(b, b, b);
    
    color += calculateBackground(ray.direction);
    return float4(color.xyz, 0.);
}

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);
    // Transform pixel to [-1,1] range
    // Get a ray for the UVs

    int AA = 2;

    float4 col = float4(0, 0, 0, 0);

    for (int x = 0; x < AA; x++)
    {
        for (int y = 0; y < AA; y++)
        {
            float2 pix = id.xy + (float2(x, y) - (AA - 1) / 2) / AA;
            float2 uv = float2((pix + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);
            Ray ray = CreateCameraRay(uv);
            col += Render(ray);
        }
    }

    col /= AA * AA;
    Result[id.xy] = col;

}