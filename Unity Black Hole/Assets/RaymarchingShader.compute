#pragma kernel CSMain

RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

struct Ray
{
    float3 origin;
    float3 direction;

    float3 at(float t)
    {
        return origin + t * direction;
    }
};

float4 sdf(float3 p)
{
    float d = length(p) - 1.;
    return float4(p.xyz*0.5+0.5, d);
}

float4 March(Ray ray)
{
    float t = 0.;
    for (int i = 0; i < 100; i++)
    {
        float4 map = sdf(ray.at(t));
        if (map.w < 0.01)
        {
            return map;
        }
        else if (t > 100.)
        {
            break;
        }

        t += map.w;
    }

    return float4(0., 0., 0., 100.);
}

float4 Render(Ray ray)
{
    float4 color = March(ray);
    return float4(color.xyz, 1.0);

    // return float4(ray.direction * 0.5f + 0.5f, 1.0f);
}

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);
    // Transform pixel to [-1,1] range
    float2 uv = float2((id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);
    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);
    // Write some colors
    Result[id.xy] = Render(ray);
}